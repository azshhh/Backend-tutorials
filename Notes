npm
    npm init --yes

Semantic Version - semver
    Major.Minor.Patch
    4.13.6
    newFeature.Feature.bugs

    newFeature -  Adding new feature with breaking existing API - 5.0.0
    Feature - Adding new feature without breaking existing API - 4.14.0
    Bug - Found any bug and update - 4.13.1
    ^ - caret
    ~ - tilde

    npm init --yes
    npm view mongoose
    npm view mongoose dependencies
    npm view mongoose versions

    npm i jshint --save--dev
    npm un mongoose

Debugging
    set DEBUG=app:startapp
    set DEBUG=app:db
    set DEBUG=app:*
    DEBUG=app:db nodemon express.js

Templating
    npm i pug
    set view engine for application
    create views folder
    create index.pug
    
Asyncchronous code
    3 patterns to deal with async code
        callback - Is a fxn, which is called when the result of async code is ready
        promise - Is an object that holds the eventual result of async operation
        async / await

    Promise work flow -
         A promise is an object that holds eventual result of an async operation.
         Initially its in the pending state,
         When we create this promise, it picks up an async operation
         This async operation can either resolves or gets rejected
         On being fullfilled, state of promise changes from pending - resolved
         On being fail, state of promise changes from pending - rejected

         Then this behaviour of promise object can be handled by 
            .then on being fullfilled
            .catch on being fail

        Promise constructor function takes an argument. which is a fxn with 2 parameter resolve and reject,
        we use these parameter to signal the result of asynchronous operation or an error.